# -*- coding: utf-8 -*-
"""mentalhealth.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JeLV89sRervEaYAifmz4nKGNadv435Tj
"""

# Commented out IPython magic to ensure Python compatibility.
import warnings 
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd



import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

data = pd.read_csv('survey.csv')

data.head()

"""Details about the features in the dataset

Timestamp

Age

Gender

Country

state: If you live in the United States, which state or territory do you live in?

self_employed: Are you self-employed?

family_history: Do you have a family history of mental illness?

treatment: Have you sought treatment for a mental health condition?

work_interfere: If you have a mental health condition, do you feel that it interferes with your work?

no_employees: How many employees does your company or organization have?

remote_work: Do you work remotely (outside of an office) at least 50% of the time?

tech_company: Is your employer primarily a tech company/organization?

benefits: Does your employer provide mental health benefits?

care_options: Do you know the options for mental health care your employer provides?

wellness_program: Has your employer ever discussed mental health as part of an employee wellness program?

seek_help: Does your employer provide resources to learn more about mental health issues and how to seek help?

anonymity: Is your anonymity protected if you choose to take advantage of mental health or substance abuse treatment resources?

leave: How easy is it for you to take medical leave for a mental health condition?

mentalhealthconsequence: Do you think that discussing a mental health issue with your employer would have negative consequences?

physhealthconsequence: Do you think that discussing a physical health issue with your employer would have negative consequences?

coworkers: Would you be willing to discuss a mental health issue with your coworkers?

physhealthinterview: Would you bring up a physical health issue with a potential employer in an interview?

mentalvsphysical: Do you feel that your employer takes mental health as seriously as physical health?

obs_consequence: Have you heard of or observed negative consequences for coworkers with mental health conditions in your workplace?

comments: Any additional notes or comments
"""

data.dtypes

"""# ***Handling Missing data***"""

data.isnull().sum(axis=0)

data.shape

"""As there are 1095 null in comments, I am dropping that attribute.

State column is applicable only to the participants from US , therefore that can't be used for further analysis. 

Timestamp is irrelevant as it shows the time the individual participated did the survey
"""

data.drop(['state', 'comments', 'Timestamp'], axis =1, inplace = True)

#filling nulls of categorical variables which cannot be dropped with a new category notknown
data['self_employed'] = data['self_employed'].fillna('NOTKNOWN')
data['work_interfere'] = data['work_interfere'].fillna('NOTKNOWN')

data.isnull().sum(axis=0)

"""Access the unique values of each columns to check for discrepencies

# ***Handling Errors in the data***
"""

df_dict = dict(zip([i for i in data.columns] , [pd.DataFrame(data[i].unique(), columns=[i]) for i in data.columns]))
print(df_dict)

"""Some entries in age appears to be erroneous values.

Gender entries are staggered and needs to be cleaned to ordered fashion.

"""

#Clean the entries in Age and print again to visualise
data.drop(data[data['Age'] < 0].index, inplace = True) 
data.drop(data[data['Age'] > 100].index, inplace = True)
data['Age'].unique()

#Replace staggered entries in Gender to ordered fashion with 3 groups - Female, Male and Others.
#Count thge entries in each category for better understanding

data['Gender'].replace(['Male ', 'male', 'M', 'm', 'Male', 'Cis Male',
                     'Man', 'cis male', 'Mail', 'Male-ish', 'Male (CIS)',
                      'Cis Man', 'msle', 'Malr', 'Mal', 'maile', 'Make',], 'Male', inplace = True)

data['Gender'].replace(['Female ', 'female', 'F', 'f', 'Woman', 'Female',
                     'femail', 'Cis Female', 'cis-female/femme', 'Femake', 'Female (cis)',
                     'woman',], 'Female', inplace = True)

data["Gender"].replace(['Female (trans)', 'queer/she/they', 'non-binary',
                     'fluid', 'queer', 'Androgyne', 'Trans-female', 'male leaning androgynous',
                      'Agender', 'A little about you', 'Nah', 'All',
                      'ostensibly male, unsure what that really means',
                      'Genderqueer', 'Enby', 'p', 'Neuter', 'something kinda male?',
                      'Guy (-ish) ^_^', 'Trans woman',], 'Others', inplace = True)

data['Gender'].value_counts()

print(data['Country'].value_counts())

"""As there are only one entries from some countries and 748 entries from another country, it cannot be treated as an attribute for training model."""

data.drop(['Country'], axis =1, inplace = True)

"""# ***Handling categorical Variables using Label Encoding***"""

from sklearn.preprocessing import LabelEncoder
object_cols = ['Gender', 'self_employed', 'family_history', 'treatment',
       'work_interfere', 'no_employees', 'remote_work', 'tech_company',
       'benefits', 'care_options', 'wellness_program', 'seek_help',
       'anonymity', 'leave', 'mental_health_consequence',
       'phys_health_consequence', 'coworkers', 'supervisor',
       'mental_health_interview', 'phys_health_interview',
       'mental_vs_physical', 'obs_consequence']
label_encoder = LabelEncoder()
for col in object_cols:
    label_encoder.fit(data[col])
    data[col] = label_encoder.transform(data[col])

data.head()

"""Plot the correlation matrix"""

corr = data.corr()
mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True
# adjust mask and df
mask = mask[1:, :-1]
corr = corr.iloc[1:,:-1].copy()
f, ax = plt.subplots(figsize=(20, 20))
ax = plt.axes()
sns.heatmap(corr,mask = mask, ax = ax, annot = True)
ax.set_title('Correlation between features')
plt.show()

"""# ***Check the distribution of target variable treatment to handle sampling***"""

f, ax = plt.subplots(figsize= (7,5))
sns.countplot(x='treatment', data=data, palette=['#432372',"#FAAE9B"])
plt.title('Distribution of treatment')
plt.xlabel('Class (1==Seeked treatment for mental health)')

"""The distribution is almost uniform

## ***Create the model***
"""

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, recall_score, plot_roc_curve, confusion_matrix, classification_report, precision_recall_curve, auc
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from xgboost.sklearn import XGBClassifier
import xgboost as xgb
from sklearn import metrics

from sklearn.model_selection import train_test_split
X = data.drop('treatment', axis = 1)
y = data['treatment']

X_train, X_test, y_train, y_test = train_test_split(X,y,
                                                   stratify = y,
                                                    test_size = 0.3,
                                                   random_state = 10)

key = ['LogisticRegression','KNeighborsClassifier','DecisionTreeClassifier','RandomForestClassifier','GradientBoostingClassifier','AdaBoostClassifier','XGBClassifier']
value = [LogisticRegression(), KNeighborsClassifier(n_neighbors = 2, weights ='uniform'), DecisionTreeClassifier(random_state=10), RandomForestClassifier( random_state=0), GradientBoostingClassifier(random_state=20), AdaBoostClassifier(), xgb.XGBClassifier(random_state=0,booster="gbtree")]
models = dict(zip(key,value))
models

predicted =[]
ordered_prediction = []
for name,algo in models.items():
    model=algo
    model.fit(X_train,y_train)
    predict = model.predict(X_test)
    acc = accuracy_score(y_test, predict)
    predicted.append(acc)
    print(name,acc)
print(predicted)

plt.figure(figsize = (10,5))
ax = sns.barplot(x = predicted, y = key, palette='Reds')
plt.title("Plotting the Model Accuracies", fontsize=16, fontweight="bold")

xgbc = XGBClassifier()
xgbc.fit(X_train,y_train)
pred = xgbc.predict(X_test)
cf_matrix = confusion_matrix(y_test, pred)
print(cf_matrix)
print(classification_report(y_test, pred, digits=5))
sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True, 
            fmt='.2%', 
             cmap='Reds')
plt.title('\nConfusion Matrix of Extreme Gradient Boost Classifier \n', fontweight='bold', fontsize=16)
plt.xlabel('Predicted', fontweight='bold', fontsize=12)
plt.ylabel('Actual', fontweight='bold', fontsize=12)